{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","legend","tooltipFormatter","value","_this","formatTime","tooltipLabelFormatter","moment","format","_this2","this","fetch","then","res","json","setState","date","time","_this3","react_default","a","createElement","className","LineChart","width","window","innerWidth","height","innerHeight","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tickFormatter","formatDate","YAxis","domain","Tooltip","formatter","labelFormatter","Legend","Object","keys","map","key","i","Line","name","type","stroke","colors","dot","connectNulls","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gXAsEeA,qNArDbC,MAAQ,CACNC,KAAM,GACNC,OAAQ,MAiBVC,iBAAmB,SAACC,GAClB,OAAOC,EAAKC,WAAWF,MAGzBG,sBAAwB,SAACH,GACvB,OAAOI,IAAOJ,GAAOK,OAAO,oGAnBV,IAAAC,EAAAC,KAClBC,MAAM,mBACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAZ,GAAI,OAAIS,EAAKM,SAASf,wCAGrBgB,GACT,OAAOT,IAAOS,GAAMR,OAAO,kDAGlBS,GACT,OAAOV,IAAOU,GAAMT,OAAO,6CAWpB,IAAAU,EAAAR,KACP,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,MAAOC,OAAOC,WAAYC,OAAQF,OAAOG,YAAa5B,KAAMU,KAAKX,MAAMC,KACvE6B,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IACxDd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAeC,gBAAgB,QAC/BhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,QAAQ,OAAOC,cAAe5B,KAAK6B,aAC1CpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOF,cAAe5B,KAAKL,WAAYoC,OAAQ,CAAC,UAAW,aAC3DtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAASC,UAAWjC,KAAKR,iBAAkB0C,eAAgBlC,KAAKJ,wBAChEa,EAAAC,EAAAC,cAACwB,EAAA,EAAD,MACCC,OAAOC,KAAKrC,KAAKX,MAAME,QAAQ+C,IAAI,SAACC,EAAKC,GAAN,OAClC/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACEF,IAAKA,EACLG,KAAMlC,EAAKnB,MAAME,OAAOgD,GACxBI,KAAK,WAAWhB,QAASY,EACzBK,OAAQC,IAAO,KAAOL,EAAE,GACxBM,KAAK,EACLC,cAAc,eA7CVC,cCJEC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,KAAK,SAAA2D,GACjCA,EAAaC","file":"static/js/main.8af8ffbe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  LineChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Line,\n} from 'recharts'\nimport colors from 'material-color'\nimport moment from 'moment';\n\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    data: [],\n    legend: {},\n  };\n\n  componentDidMount() {\n    fetch(\"/arrivals/chart\")\n      .then(res => res.json())\n      .then(data => this.setState(data))\n  }\n\n  formatDate(date) {\n    return moment(date).format('DD MMM YYYY')\n  }\n\n  formatTime(time) {\n    return moment(time).format('HH:mm:ss')\n  }\n\n  tooltipFormatter = (value) => {\n    return this.formatTime(value)\n  }\n\n  tooltipLabelFormatter = (value) => {\n    return moment(value).format('DD MMMM YYYY')\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <LineChart width={window.innerWidth} height={window.innerHeight} data={this.state.data}\n                   margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" tickFormatter={this.formatDate} />\n          <YAxis tickFormatter={this.formatTime} domain={['dataMin', 'dataMax']}/>\n          <Tooltip formatter={this.tooltipFormatter} labelFormatter={this.tooltipLabelFormatter} />\n          <Legend />\n          {Object.keys(this.state.legend).map((key, i) => (\n            <Line\n              key={key}\n              name={this.state.legend[key]}\n              type=\"monotone\" dataKey={key}\n              stroke={colors['700'][i+1]}\n              dot={false}\n              connectNulls={true}\n            />\n          ))}\n        </LineChart>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}